// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';


function print_lambda(l) {
  var print_paren = function (b, s) {
    if (b) {
      return "(" + s + ")";
    } else {
      return s;
    }
  };
  var go = function (l, p) {
    switch (l.TAG | 0) {
      case /* Var */0 :
          return l._0;
      case /* Fn */1 :
          return print_paren(p > 0, "fun " + l._0 + " -> " + go(l._1, 0));
      case /* App */2 :
          return print_paren(p > 1, go(l._0, 1) + " " + go(l._1, 2));
      
    }
  };
  return go(l, 0);
}

function rename(t, old, $$new) {
  var go = function (t) {
    switch (t.TAG | 0) {
      case /* Var */0 :
          var x = t._0;
          if (x === old) {
            return {
                    TAG: /* Var */0,
                    _0: $$new
                  };
          } else {
            return {
                    TAG: /* Var */0,
                    _0: x
                  };
          }
      case /* Fn */1 :
          var a = t._1;
          var x$1 = t._0;
          if (x$1 === old) {
            return {
                    TAG: /* Fn */1,
                    _0: $$new,
                    _1: go(a)
                  };
          } else {
            return {
                    TAG: /* Fn */1,
                    _0: x$1,
                    _1: go(a)
                  };
          }
      case /* App */2 :
          return {
                  TAG: /* App */2,
                  _0: go(t._0),
                  _1: go(t._1)
                };
      
    }
  };
  return go(t);
}

var t = {
  TAG: /* Fn */1,
  _0: "x",
  _1: {
    TAG: /* App */2,
    _0: {
      TAG: /* Var */0,
      _0: "y"
    },
    _1: {
      TAG: /* Var */0,
      _0: "x"
    }
  }
};

console.log(print_lambda(t));

console.log(print_lambda(rename(t, "x", "z")));

var t$1 = {
  TAG: /* Fn */1,
  _0: "x",
  _1: {
    TAG: /* Fn */1,
    _0: "y",
    _1: {
      TAG: /* App */2,
      _0: {
        TAG: /* App */2,
        _0: {
          TAG: /* Fn */1,
          _0: "x",
          _1: {
            TAG: /* Var */0,
            _0: "x"
          }
        },
        _1: {
          TAG: /* Var */0,
          _0: "x"
        }
      },
      _1: {
        TAG: /* Var */0,
        _0: "y"
      }
    }
  }
};

console.log(print_lambda(t$1));

console.log(print_lambda(rename(t$1, "x", "z")));

function fresh_name(param) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "Name.res",
          54,
          2
        ],
        Error: new Error()
      };
}

function subst(t, x, u) {
  switch (t.TAG | 0) {
    case /* Var */0 :
        var y = t._0;
        if (x === y) {
          return u;
        } else {
          return {
                  TAG: /* Var */0,
                  _0: y
                };
        }
    case /* Fn */1 :
        var y$1 = t._0;
        if (x === y$1) {
          return t;
        }
        var y$p = fresh_name(undefined);
        var b$p = rename(t._1, y$1, y$p);
        return {
                TAG: /* Fn */1,
                _0: y$p,
                _1: subst(b$p, x, u)
              };
    case /* App */2 :
        return {
                TAG: /* App */2,
                _0: subst(t._0, x, u),
                _1: subst(t._1, x, u)
              };
    
  }
}

function shift(i, d, u) {
  switch (u.TAG | 0) {
    case /* Var */0 :
        var j = u._0;
        if (j >= d) {
          return {
                  TAG: /* Var */0,
                  _0: i + j | 0
                };
        } else {
          return u;
        }
    case /* Fn */1 :
        return {
                TAG: /* Fn */1,
                _0: u._0,
                _1: shift(i, d + 1 | 0, u._1)
              };
    case /* App */2 :
        return {
                TAG: /* App */2,
                _0: shift(i, d, u._0),
                _1: shift(i, d, u._1)
              };
    
  }
}

function subst$1(t, i, u) {
  switch (t.TAG | 0) {
    case /* Var */0 :
        if (t._0 === i) {
          return u;
        } else {
          return t;
        }
    case /* Fn */1 :
        return {
                TAG: /* Fn */1,
                _0: t._0,
                _1: subst$1(t._1, i + 1 | 0, shift(1, 0, u))
              };
    case /* App */2 :
        return {
                TAG: /* App */2,
                _0: subst$1(t._0, i, u),
                _1: subst$1(t._1, i, u)
              };
    
  }
}

var f = 3;

var Debru = {
  shift: shift,
  subst: subst$1,
  f: f
};

var id = {
  TAG: /* Fn */1,
  _0: "x",
  _1: {
    TAG: /* Var */0,
    _0: "x"
  }
};

exports.print_lambda = print_lambda;
exports.rename = rename;
exports.id = id;
exports.t = t$1;
exports.fresh_name = fresh_name;
exports.subst = subst;
exports.Debru = Debru;
/*  Not a pure module */
